{
  "name": "My workflow 3",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {
          "download": false,
          "userIds": ""
        }
      },
      "id": "46d8ce8f-c553-452e-b6e7-aaa8606f0bd4",
      "name": "Telegram Message Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -1424,
        272
      ],
      "webhookId": "1b0bf55e-6635-4ce4-9bac-932f5889dbdc",
      "credentials": {
        "telegramApi": {
          "id": "tHXjTtBHAMeDXLIQ",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "audio-check",
              "leftValue": "={{ $json.message.voice }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "914f223f-8e18-4af3-8e19-580509897798",
      "name": "Check if Audio file",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1200,
        272
      ]
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $json.message.voice.file_id }}",
        "additionalFields": {}
      },
      "id": "c5290ae3-e8a7-4c29-a7a3-abab66ccacfd",
      "name": "Get a file",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -976,
        176
      ],
      "webhookId": "8a8d13e4-df0e-410f-8d30-9671886e6e6a",
      "credentials": {
        "telegramApi": {
          "id": "tHXjTtBHAMeDXLIQ",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      },
      "id": "a0cb10b7-8a45-4765-8cd1-b305fdc21899",
      "name": "Transcribe audio",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -752,
        176
      ],
      "credentials": {
        "openAiApi": {
          "id": "TaErODEqzXpfNT1w",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "text-field",
              "name": "text",
              "value": "={{ $json.message.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "91aa01ee-089b-432a-b962-1f5275604800",
      "name": "Set text field",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -752,
        368
      ]
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Telegram Message Trigger').first().json.message.chat.id }}",
        "contextWindowLength": 10
      },
      "id": "c011748c-8d2b-4dbf-9abf-bfcec1e1c631",
      "name": "Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -392,
        496
      ]
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4",
          "mode": "list",
          "cachedResultName": "gpt-4"
        },
        "options": {}
      },
      "id": "337600b5-228f-4143-bc09-add62b524a99",
      "name": "Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -528,
        496
      ],
      "credentials": {
        "openAiApi": {
          "id": "TaErODEqzXpfNT1w",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.text || $json.message.text }}",
        "options": {
          "systemMessage": "You are a professional note-taking assistant that extracts structured data from voice notes and text messages. Your job is to process notes and extract specific information in a structured format.\n\n## Your Task\nProcess the input note and extract the following structured data:\n- **raw_transcript**: The exact text from the note\n- **actions_json**: Array of actionable items mentioned in the note\n- **decisions**: Array of decisions made or mentioned in the note\n- **summary**: A brief, clear summary of the note\n- **formatted_doc_text**: Formatted text suitable for Google Docs with proper structure\n\n## Output Format\nReturn ONLY a valid JSON object with these exact keys:\n```json\n{\n  \"raw_transcript\": \"exact text from note\",\n  \"actions_json\": [\"action 1\", \"action 2\"],\n  \"decisions\": [\"decision 1\", \"decision 2\"],\n  \"summary\": \"brief summary\",\n  \"formatted_doc_text\": \"formatted text for docs\"\n}\n```\n\n## Guidelines\n- Be accurate and concise\n- Extract only clear actions and decisions\n- Format the doc text with proper headings and structure\n- If no actions or decisions are found, use empty arrays\n- Always return valid JSON\n\n## Available Tools\n- **Google Sheets Tool**: Save structured data to spreadsheet\n- **Google Docs Tool**: Append formatted text to document\n\nUse these tools to save the processed data after extraction."
        }
      },
      "id": "46c97520-805e-4a37-99b8-9877f91ce490",
      "name": "Note Processing Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -528,
        272
      ]
    },
    {
      "parameters": {
        "jsCode": "// Extract JSON from markdown code block\nconst output = $input.first().json.output;\n\n// Remove markdown code block markers\nconst jsonString = output.replace(/```json\\n?/g, '').replace(/```\\n?/g, '').trim();\n\n// Parse the JSON\nlet parsedData;\ntry {\n  parsedData = JSON.parse(jsonString);\n} catch (error) {\n  // If parsing fails, return error data\n  parsedData = {\n    raw_transcript: output,\n    actions_json: [],\n    decisions: [],\n    summary: \"Error parsing JSON response\",\n    formatted_doc_text: output\n  };\n}\n\n// Return the parsed data\nreturn [{\n  json: parsedData\n}];"
      },
      "id": "059eaf70-5fd3-4247-ba0c-ce73c2d0e846",
      "name": "Parse JSON Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -176,
        272
      ]
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1qT4ZzOeDf6sdcvaAR3Pth3XCp0yAyamx-2MwfbhiTLo",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "Sheet1",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "timestamp": "={{ $now.format('yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'') }}",
            "sender_name": "={{ $('Telegram Message Trigger').first().json.message.from.first_name }}",
            "chat_id": "={{ $('Telegram Message Trigger').first().json.message.chat.id }}",
            "note_type": "={{ $('Telegram Message Trigger').first().json.message.voice ? 'voice' : 'text' }}",
            "raw_transcript": "={{ $json.raw_transcript }}",
            "summary": "={{ $json.summary }}",
            "actions_json": "={{ $json.actions_json }}",
            "decisions": "={{ $json.decisions }}",
            "formatted_message": "={{ $json.formatted_doc_text }}",
            "status": "success",
            "error_message": ""
          },
          "schema": [
            {
              "id": "timestamp",
              "displayName": "timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "sender_name",
              "displayName": "sender_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "note_type",
              "displayName": "note_type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "raw_transcript",
              "displayName": "raw_transcript",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "summary",
              "displayName": "summary",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "actions_json",
              "displayName": "actions_json",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "decisions",
              "displayName": "decisions",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "formatted_message",
              "displayName": "formatted_message",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "error_message",
              "displayName": "error_message",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ]
        },
        "options": {
          "useAppend": true
        }
      },
      "id": "f3ce9865-b1d0-403f-96fd-e362690e7644",
      "name": "Append to Google Sheets",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        48,
        176
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "b7Xh5PXewmp9mLDy",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentURL": "1WsuNsWz5Tu6I7htmS987ogXvsv13G5965IRo82Lx0WA",
        "actionsUi": {
          "actionFields": [
            {
              "action": "insert",
              "text": "==== {{ $now.format('yyyy-MM-dd HH:mm') }} - {{ $('Telegram Message Trigger').first().json.message.from.first_name }} ===\n\n{{ $json.formatted_doc_text }}\n\n---\n\n"
            }
          ]
        }
      },
      "id": "6f6b0fb7-0be1-4f16-be8f-71463802332a",
      "name": "Append to Google Docs",
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        48,
        368
      ],
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "0ivdCneuW3nlzRjn",
          "name": "Google Docs account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Message Trigger').first().json.message.chat.id }}",
        "text": "=Note processed successfully!|Summary: {{ $json.summary }}Actions: {{ $json.actions_json.length }} itemsDecisions: {{ $json.decisions.length }} itemsData saved to Google Sheets and Docs!",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "9c5686cd-8fba-4850-8bb7-a5a0c7cefef2",
      "name": "Success Reply",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        480,
        272
      ],
      "webhookId": "901a5714-d9d7-4758-99f6-7cff224bc1e2",
      "credentials": {
        "telegramApi": {
          "id": "tHXjTtBHAMeDXLIQ",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "mode": "chooseBranch"
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        272,
        272
      ],
      "id": "10008e44-1e33-408f-b357-cfbfe8f96482",
      "name": "Merge"
    }
  ],
  "pinData": {},
  "connections": {
    "Telegram Message Trigger": {
      "main": [
        [
          {
            "node": "Check if Audio file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if Audio file": {
      "main": [
        [
          {
            "node": "Get a file",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set text field",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get a file": {
      "main": [
        [
          {
            "node": "Transcribe audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcribe audio": {
      "main": [
        [
          {
            "node": "Note Processing Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set text field": {
      "main": [
        [
          {
            "node": "Note Processing Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Memory": {
      "ai_memory": [
        [
          {
            "node": "Note Processing Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Model": {
      "ai_languageModel": [
        [
          {
            "node": "Note Processing Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Note Processing Agent": {
      "main": [
        [
          {
            "node": "Parse JSON Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse JSON Response": {
      "main": [
        [
          {
            "node": "Append to Google Sheets",
            "type": "main",
            "index": 0
          },
          {
            "node": "Append to Google Docs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append to Google Sheets": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append to Google Docs": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Success Reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "f2aeb842-b404-4030-93a5-94b1a4620365",
  "meta": {
    "instanceId": "8e1b3412574777ddead9924e413ace8ce1a29e9bb466f00d4df5ac1942aaecc9"
  },
  "id": "eFSfC5ij5IFd721d",
  "tags": []
}